generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?         @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  roomsOwned    Room[]            @relation("RoomOwner") // Opposite side of Room.owner
  participants  RoomParticipant[] // Links to RoomParticipant.user
  messages      ChatMessage[] // Links to ChatMessage.sender
  files         File[]            @relation("UserFiles") // Links to File.uploadedBy

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Room {
  id           String            @id @default(cuid())
  code         String            @unique
  name         String?
  isActive     Boolean           @default(true)
  ownerId      String
  owner        User              @relation("RoomOwner", fields: [ownerId], references: [id])
  participants RoomParticipant[]
  chatMessages ChatMessage[]
  files        File[]
  createdAt    DateTime          @default(now())
}

model RoomParticipant {
  id       String    @id @default(cuid())
  userId   String
  roomId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  micOn    Boolean   @default(true)
  cameraOn Boolean   @default(true)

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  roomId    String
  timestamp DateTime @default(now())

  sender User @relation(fields: [senderId], references: [id])
  room   Room @relation(fields: [roomId], references: [id])
}

model File {
  id           String   @id @default(cuid())
  fileName     String
  mimeType     String
  size         Int
  url          String
  encryptedKey String
  uploadedById String
  roomId       String
  uploadedAt   DateTime @default(now())

  uploadedBy User @relation("UserFiles", fields: [uploadedById], references: [id])
  room       Room @relation(fields: [roomId], references: [id])
}
