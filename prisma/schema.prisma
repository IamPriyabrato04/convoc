generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(cuid())
  name           String?
  email          String?            @unique
  emailVerified  DateTime?          @map("email_verified")
  image          String?
  password       String?
  messages       ChatMessage[]
  files          File[]             @relation("UserFiles")
  roomsOwned     Room[]             @relation("RoomOwner")
  participants   RoomParticipant[]
  waitingEntries WaitingListEntry[]
  accounts       Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Room {
  id           String             @id @default(cuid())
  code         String             @unique
  name         String?
  isActive     Boolean            @default(true)
  ownerId      String
  createdAt    DateTime           @default(now())
  description  String?
  scheduledAt  DateTime?
  chatMessages ChatMessage[]
  files        File[]
  owner        User               @relation("RoomOwner", fields: [ownerId], references: [id])
  participants RoomParticipant[]
  waitingList  WaitingListEntry[]
}

model RoomParticipant {
  id       String            @id @default(cuid())
  userId   String
  roomId   String
  joinedAt DateTime          @default(now())
  leftAt   DateTime?
  micOn    Boolean           @default(true)
  cameraOn Boolean           @default(true)
  status   ParticipantStatus @default(PENDING)
  room     Room              @relation(fields: [roomId], references: [id])
  user     User              @relation(fields: [userId], references: [id])
}

model WaitingListEntry {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  roomId    String
  timestamp DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model File {
  id           String   @id @default(cuid())
  fileName     String
  mimeType     String
  size         Int
  url          String
  encryptedKey String
  uploadedById String
  roomId       String
  uploadedAt   DateTime @default(now())
  room         Room     @relation(fields: [roomId], references: [id])
  uploadedBy   User     @relation("UserFiles", fields: [uploadedById], references: [id])
}

enum ParticipantStatus {
  PENDING
  ACCEPTED
  REJECTED
}
